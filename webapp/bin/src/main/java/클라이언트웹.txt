apache.org

http://127.0.0.1:8088
http://localhost:8088
http://192.168.0.114:8088
http://ip:port
=> web server나 web application server프로그램을 설치한 컴퓨터는 웹에서 서비스를 제공할 수 있는
     웹 서버가 된다.
=> web application파일은 웹에서 실행되는 프로그램을 의미
      html, jsp,php,js,css
=> was(web application server)에서 인식 기본위치에서 index로 시작하는 파일을 찾아서 실행
    : 어떤 was를 쓰냐에 따라 기본으로 인식하는 위치는 달라진다.
     was종류에는 JEUS, JBOSS, Weblogic, websphere, tomcat등
     tomcat이 인식하는 기본위치는 
     C:\Program Files\Apache Software Foundation\Tomcat 9.0\webapps

=> 기본을 인식하는 폴더가 아닌 경우 요청방법은
   http://ip:port/web에서 서비스할 수 있는 파일들이 저장되어 있는 폴더/web application파일명
                      --------------------------------------------------------------
                                 web application폴더
                                 context
                               => root폴더만 context명을 쓰지 않고 요청

   http://127.0.0.1:8088/docs/api/index.html
  ------   --------  ------ ----- -----  ----------------------
                                        |________폴더    |______________web application파일
프로토콜   ip      port  context명
                                       

   [미션]
    examples컨텍스트의 servlets폴더의 cookies.html파일을 실행하고 
    examples컨텍스트의 jsp폴더의 index.html파일을 실행한 결과를 캡쳐해서 전송

    http://127.0.0.1:8088/examples/servlets/cookies.html
    http://127.0.0.1:8088/examples/jsp/index.html

     http://192.168.0.114:8088/myhome/test.html


 1. 웹프로젝트 생성
    1) dynamic web project생성
    2) 웹어플리케이션의 encoding을 utf-8로 변경
    3) 서버등록
       - [servers]탭에 등록
       - admin port 8005셋팅 
 2. DB설정
 
 
 
 	
[미션]
    - [webworkexam] 워크스페이스만들기
    - [webtest] dinamic webproject만들기
   - html,jsp,css,workspace모두 utf-8로 인코딩 설정하기
    - 서버설정하고
    - hello.html만들기
    - 크롬으로 실행결과 캡쳐(ip로 요청하기)
    - 이클립스 구조 캡쳐
    
   [web application폴더의 구조]
   - 어떤 WAS(Web Application Server)를 쓰냐와 상관없이 표준화된 폴더 구조로 Web Application폴더를 작성해야 한다.
                                                                   -------------------
                                                                    Context
   - 웹에서 서비스가 되려면 반드시 아래와 같은 표준화된 폴더 구조를 갖도록 만들어야 하고 정확하게 정해진 위치에
     web application파일을 만들어야 한다.
     
   - IDE마다 서버가 인식하는 기본위치가 다르다.
     [이클립스(STS)]
     C:\back_MSA\work\webwork\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps                                                                    
   +-------------+
   |   context   |
   +-------------+
         |-----+-----+
         |     |폴더  | -이미지파일, html파일, css파일, js파일, jsp파일
         |     +-----+
         |---- 이미지파일, html파일, css파일, js파일, jsp파일
         |-----+---------+
               |WEB-INF  |
               +---------+
                    |------- web.xml     : 설정정보를 정의하는 설정파일
                    |------+-------+ 
                    |      | lib   |     : 라이브러리 파일이 위치하는 폴더(jdbc라이브러리....)
                    |      +-------+        (maven, gradle로 관리)
                    |------+---------+
                           | classes |   : 서블릿디렉토리(서블릿클래스와 자바클래스가 위치하는 폴더)
                           +---------+     

 [front-end기술]
 => 웹표준이을 지켜서 개발해야 한다.
 => 웹표준은 웹에서 사용되는 표준기술이나 규칙
    ------------
       이 표준화를 담당하는 기관 W3C
 => 전세계 개발자들이 모두 사용하는 기술
 => 크롬, 엣지, 파이어폭스(모질라재단), 사파리(애플), 오페라 같은 브라우저 위에서 동작
 => 브라우저를 만든 회사가 다르므로 브라우저마다 약간씩 다르게 동작하기도 한다.
    (크로스브라우징)
    
 HTML - 웹 문서의 구성요소를 정의하기 위한 기술
 CSS - 시각적인 표현을 담당 (스타일을 정의하거나 레이아웃)
 javascript - 컨텐츠를 바꾸고 움직이는 등 페이지를 동작하도록 만드는 처리를 담당
 
 
 1. HTML
    - 웹 페이지의 구조를 담당
    - 웹 페이지를 구성하는 구성요소를 정의하는 역할
    - Tag로 구성
    - Tag를 작성하는 방법
      <시작태그 속성1="속성값1" 속성2="속성값2"></종료태그>
      : 속성은 태그마다 다른 속성이 적용
      : 모든 태그에서 공통으로 사용되는 속성
      1) 문서구조
      2) 기본태그
      3) 이미지
      	 - path를 적용
      	 - 이미지, 하이퍼링크, css파일, js파일, 백엔드어플리케이션 연결 등 경로가 나오면 모두 동일하게 작업
      	 - 모든 path는 서버가 인식하는 표준화된 폴더구조를 기준으로 생각한다.
      	                         ---------------- 
  			C:\back_MSA\work\webwork\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps
  			아래 만들어지는 폴더를 기준으로 경로를 생각
         ① 절대경로
           => 이미지가 위치하는 경로의 pull path를 모두 적용
           => 서버의 위치 값까지 모두 적용
                   -------
                   ip,port,context명
           => 절대경로에서 ip는 생략가능
           <img src="http://ip:port/context명/폴더.../이미지파일명" />
           <img src="/context명/폴더..../이미지파일명"/>        
 
         ② 상대경로
           => 현재 문서의 위치를 기준으로 경로를 파악
           => 현재 요청된 문서의 위치를 기준으로 src에 명시된 경로를 찾는다.
 			<img src="clientweb/images/bts2.jpg"/>
            : 현재요청된 image.html문서의 위치를 기준으로 찾는다. image.html문서의 위치가 /clientweb/html이
            위치이므로 이 위치에서 clientweb/images폴더를 찾는다.
           => . 의 의미는 현재디렉토리
           <img src="./images/bts2.jpg" />
           현재 문서의 위치에서 images폴더를 찾는다.
           
           => ..의 의미는 상위디렉토리
 			<img src="../images/bts2.jpg"/>
            상위로 올라가서 images폴더를 찾는다.
 	4) 하이퍼링크
 	   - 클릭하면 다른 문서나 사이트로 이동할 수 있도록 연결
 	   - 문서내에서 이동 가능
 	   - 형식
 	      <a>클릭할 문자열이나 이미지</a>
 	      href속성 : 연결할 문서 혹은 사이트 주소(path - 절대,상대 주소 모두 이미지에서 작업하는 것과 동일)
 
    5) 테이블
    6) 리스트
    7) form태그(양식태그)
       - 서버와 통신하기 위해서 사용자의 입력을 받을 수 있도록 지원
       - <form></form>안에 정의
         <form method="요청방식" action="요청할 web application의 path">
                      -------
                      클라이언트가 
                      서버로 요청을 어떤
                      방식으로 보낼 것인지 명시
                      get이나 post방식으로 요청
                      생략하면 get방식
 
         </form>
         
        - submit이라는 버튼을 눌렀을때 <form></form>사이에 정의되어 있는 모든 양식태그의 name과 사용자가 입력한 값이
           서버로 전송된다.
           action에 명시한 web application파일이 실행된다.
        - 요청방식
          get방식 : 서버의 데이터를 가져오기 위한 방식
                   4000byte정도를 서버로 넘길 수 있다.
                   주소표시줄에 사용자가 입력한 값이 그대로 노출(요청헤더에 사용자가 입력한 데이터가 추가되어 전송)    
          post방식 : 사용자가 입력한 내용이 요청메시지의 바디에 추가되어 전송되므로 주소표시줄에 노출되지 않는다.
                    길이제한이 없다.
                    파일업로드는 무조건 post방식으로 처리해야 한다.
 
         - 서버로 사용자가 선택한 혹은 입력한 데이터를 전송하는 경우 값을 구분할 수 있도록 반드시 name속성을 정의해야 한다.
 
 2. CSS(Cascading Style Sheet)
    1) 개요
    2) CSS의 사용방법
       선택자{
          속성1:속성값1;
          속성2:속성값2;
          ....
       }
       ① inline
       ② 문서내에 선언 후 사용
       ③ 외부문서에 작성하고 문서내에서 연결해서 사용
         <link rel="stylesheet" type="text/css" href="/clientweb/common/css/css_exam.css">
              ----------------  -------------   -------------------------------------------
              현재연결된 문서가        브라우저가                      연결할 문서의 path(이미지,하이퍼링크동일)
              어떤 것과 연관이 있는지   해석할 수 있도록
              명시                  response되는    
                                   데이터의 타입을 
                                   정확하게 명시
                                   MIME타입

    3) CSS의 기본 선택자
       ① 전체선택자(*)
         :모든 요소를 선택
       ② 태그선택자
         태그명{
         	속성:속성값..
         }
         - 해당 태그를 모두 선택해서 속성을 적용
		 - 여러 태그에 동일한 서식을 적용하기 위해서
           태그명1,태그명2...{
           }
       ③ class선택자
         - class속성이 정의되어있는 요소만 속성을 적용
         - class속성은 모든 태그에서 정의하고 사용 가능한 속성
         - 다른 태그에 중복해서 정의할 수 있다.
         - 동일한 서식을 태그와 상관없이 여러 곳에 정의할 때 사용
         - 원하는 서식을 적용하고 싶은 태그내부에 class속성 정의
           <input class="클래스명"/>
         - 정의된 클래스속성에 css속성을 정의
           .class속성명{
           		속성:속성값
           }
       ④ id선택자
         - 식별하기 위해서 사용하는 선택자이므로 한 페이지에 동일한 id는 정의하지 않는다.
         - javascript와 jQuery에서 사용
         - 모든 태그에서 사용할 수 있는 속성으로 태그 내부에서 id속성을 먼저 정의한다.
         - css에서 id속성에 대해 정의
           #id{
              속성:속성값
           }
       
   4) CSS의 복합구성선택자
      ① 태그명.클래스명(태그명#id명)
        모든 조건을 만족하는 요소를 선택
        태그명.클래스명{
           속성:속성값
        }      
        ex)
        div.test{
        
        }
        => div태그 중에서 test라는 이름으로 class속성이 정의된 요소를 선택

	  ② 선택자1 > 선택자2
	    - 선택자1의 자식요소가 선택자2인 요소를 선택
	    - 바로 아래의 하위요소
	    ex) ul > .mycontent
	    
      ③ 선택자1 선택자2
        - 띄어쓰기가 구분기호
        - 선택자1의 하위요소인 선택자2를 선택
        - 선택자1의 모든 하위요소를 선택

      ④ 선택자1 + 선택자2
        - 형제요소를 선택하기 위한 방법
        - 선택자1의 바로 다음 형제요소
			.java + li{
				color: green;
				font-size: 30pt;
			}
            => java라는 클래스속성으로 정의된 요소의 다음 형제요소인 li를 선택

 	  ⑤ 선택자1 ~ 선택자2
 	    - 선택자1의 다음 형제요소 중 선택자2에 해당하는 모든 요소를 선택
   5) 가상선택자
      - 어떤 상태가 발생했을때를 선택자로 활용하는 경우
      - 선택자:상태
      ① a:link
        - a태그에 링크가 걸려있는 상태
      ② a:visited
        - a태그를 방문한 후 상태
      ③ a:hover
        - 마우스 포인터를 올려 놓는 상황(a태그가 아니라도 사용이 가능)
        - 마우스 포인터가 올라가 있는 상태를 선택자로 사용
        
      ④ a:active
        - 마우스로 요소를 선택하고 있는 동안을 선택자로 활용
        - 마우스 선택을 계속 유지하는 동안을 의미
      ⑤ 선택자1:first-child
         => 선택자1이 첫번째 자식요소인 경우 선택
      ⑥ 선택자1:last-child
         => 선택자1이 마지막 자식요소인 경우 선택
         
      ⑦ 선택자1:nth-child(n)
         => n
   6) 속성선택자
      - 태그의 속성을 선택자로 이용할 수 있다.
      [속성]
      => 속성을 포함하고 있는 모든 요소를 선택
      
      [속성="값"]
      => 속성을 포함하고 있는 모든 요소의 속성값이 일치하는 것을 선택           
   7) 기본속성
   8) 텍스트관련속성
   9) 테이블관련속성
   10) 박스모델
   11) 포지셔닝
       - css에서 중요한 속성 중 하나 
       - 웹 문서의 레이아웃과 연관이 있는 속성
       - 웹 문서를 구성하는 컨텐츠의 위치를 정하고 배치하는 것이 포지셔닝
       ① 포지셔닝의 종류
         - 상대위치(relative)
           : 자신의 위치를 기준으로 값을 지정(원래 기본으로 그려져야 하는 자신의 위치를 기준) 
         - 절대위치(absolute)
           : position속성에 absolute를 정의
             문서를 기준으로 위치가 정해지므로 좌표속성(top,left)에 지정한 값으로 이동
             상위요소를 기준으로 배치
             
         - 고정위치
         - 정적위치(static)
           : position속성에 static를 정의
             position을 설정하지 않았을때 원래 기본 흐름대로 출력
             위 -> 아래
             왼쪽 -> 오른쪽으로 배치
             좌표속성을 사용할 수 없다.
             상위요소를 기준으로 움직임
         
   12) 플로팅
        - 문서의 흐름을 제어한다.
        - float 속성을 left나 right로 처리한다.
        - 플로팅이 웹 문서에서 부분적으로 적용이 된 경우에 다른 요소들에 영향을 줄 수 있다.
          플로팅 영향을 받아 웹문서에 제대로 출력이 되지 않는 상황이 생긴다면 플로팅을 해제할 수 있다
            clear : left || right || both
        - box-sizing
          content-box(기본값) : content-box의 width는 box의 컨텐츠만을 위한 사이즈이다.
                               따라서 padding이나 border 값이 변경되면 사이즈가 조절된다.

          border-box : border-box 모델에서 width는 content, padding, border 등의 모든 사이즈가 고려된 사이즈이다.
                        ㅇ
   13) flex
   14) 애니메이션 및 효과
   
   
   
   
   
   
   
   
   
   
   









